// Code generated by sqlc. DO NOT EDIT.

package models

import (
	"database/sql"
	"fmt"
	"time"
)

type Roles string

const (
	RolesAdmin  Roles = "admin"
	RolesVendor Roles = "vendor"
	RolesClient Roles = "client"
)

func (e *Roles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Roles(s)
	case string:
		*e = Roles(s)
	default:
		return fmt.Errorf("unsupported scan type for Roles: %T", src)
	}
	return nil
}

type Inventory struct {
	ID              int64          `json:"id"`
	ProdID          sql.NullInt32  `json:"prod_id"`
	TransactionID   sql.NullString `json:"transaction_id"`
	Receipt         sql.NullString `json:"receipt"`
	Available       sql.NullBool   `json:"available"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
	DeletedAt       sql.NullTime   `json:"deleted_at"`
	TransactionTime time.Time      `json:"transaction_time"`
	Uuid            string         `json:"uuid"`
	Delivered       bool           `json:"delivered"`
}

type ProductInfo struct {
	ID           int64          `json:"id"`
	ProdName     sql.NullString `json:"prod_name"`
	ProdID       string         `json:"prod_id"`
	ProdDesc     sql.NullString `json:"prod_desc"`
	Price        sql.NullString `json:"price"`
	GameBundleID string         `json:"game_bundle_id"`
}

type User struct {
	ID        int64        `json:"id"`
	Username  string       `json:"username"`
	Password  string       `json:"password"`
	Role      Roles        `json:"role"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	DeletedAt sql.NullTime `json:"deleted_at"`
	Uuid      string       `json:"uuid"`
}
